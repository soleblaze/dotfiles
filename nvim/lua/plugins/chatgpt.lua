return {
  "jackMort/ChatGPT.nvim",
  event = "VeryLazy",
  config = function()
    require("chatgpt").setup({
      actions_paths = { vim.fn.stdpath("config") .. "/chatgpt.json" },
      edit_with_instructions = {
        diff = false,
        keymaps = {
          close = "<C-c>",
          accept = "<C-a>",
          toggle_diff = "<C-d>",
          toggle_settings = "<C-o>",
          cycle_windows = "<Tab>",
          use_output_as_input = "<C-i>",
        },
      },
      chat = {
        keymaps = {
          close = { "<C-c>" },
          yank_last = "<C-y>",
          yank_last_code = "<C-k>",
          scroll_up = "<C-u>",
          scroll_down = "<C-d>",
          new_session = "<C-n>",
          cycle_windows = "<Tab>",
          cycle_modes = "<C-f>",
          select_session = "<Space>",
          rename_session = "r",
          delete_session = "d",
          draft_message = "<C-d>",
          toggle_settings = "<C-o>",
          toggle_message_role = "<C-r>",
          toggle_system_role_open = "<C-s>",
        },
      },
      openai_params = {
        model = "gpt-4-1106-preview",
        frequency_penalty = 0,
        presence_penalty = 0,
        max_tokens = 2048,
        temperature = 0,
        top_p = 1,
        n = 1,
      },
      openai_edit_params = {
        model = "gpt-4-1106-preview",
        frequency_penalty = 0,
        presence_penalty = 0,
        temperature = 0,
        top_p = 1,
        n = 1,
      },
    })
  end,
  dependencies = {
    "MunifTanjim/nui.nvim",
    "nvim-lua/plenary.nvim",
    "nvim-telescope/telescope.nvim",
  },
  keys = {
    { "<leader>aR", "<cmd>ChatGPTRun roxygen_edit<cr>", desc = "Roxygen Edit", mode = "v" },
    { "<leader>aR", "<cmd>ChatGPTRun roxygen_edit<cr>", desc = "Roxygen Edit" },
    { "<leader>aT", "<cmd>ChatGPTRun translate<cr>", desc = "Translate", mode = "v" },
    { "<leader>aT", "<cmd>ChatGPTRun translate<cr>", desc = "Translate" },
    { "<leader>ad", "<cmd>CHatGPTRun docstring<cr>", desc = "DocString", mode = "v" },
    { "<leader>ad", "<cmd>CHatGPTRun docstring<cr>", desc = "DocString" },
    { "<leader>ae", "<cmd>ChatGPTRun explain_code<cr>", desc = "Explain Code", mode = "v" },
    { "<leader>ae", "<cmd>ChatGPTRun explain_code<cr>", desc = "Explain Code" },
    { "<leader>af", "<cmd>ChatGPTRun fix_bugs<cr>", desc = "Fix Bugs", mode = "v" },
    { "<leader>af", "<cmd>ChatGPTRun fix_bugs<cr>", desc = "Fix Bugs" },
    { "<leader>ag", "<cmd>ChatGPTRun grammer_correction<cr>", desc = "Grammer Correction", mode = "v" },
    { "<leader>ag", "<cmd>ChatGPTRun grammer_correction<cr>", desc = "Grammer Correction" },
    {
      "<leader>ai",
      "<cmd>lua require('chatgpt').edit_with_instructions()<cr>",
      desc = "Edit with Instructions",
      mode = "v",
    },
    { "<leader>ai", "<cmd>lua require('chatgpt').edit_with_instructions()<cr>", desc = "Edit with Instructions" },
    { "<leader>ak", "<cmd>ChatGPTRun keywords<cr>", desc = "Keywords" },
    {
      "<leader>ak",
      "<cmd>ChatGPTRun keywords<cr>",
      desc = "Keywords",
      mode = "v",
    },
    { "<leader>ao", "<cmd>ChatGPTRun optimize_code<cr>", desc = "Optimize Code" },
    {
      "<leader>ao",
      "<cmd>ChatGPTRun optimize_code<cr>",
      desc = "Optimize Code",
      mode = "v",
    },
    { "<leader>ar", "<cmd>ChatGPTRun code_readability_analysis<cr>", desc = "Code Readability Analysis" },
    {
      "<leader>ar",
      "<cmd>ChatGPTRun code_readability_analysis<cr>",
      desc = "Code Readability Analysis",
      mode = "v",
    },
    { "<leader>as", "<cmd>ChatGPTRun summarize<cr>", desc = "Summarize" },
    {
      "<leader>as",
      "<cmd>ChatGPTRun summarize<cr>",
      desc = "Summarize",
      mode = "v",
    },
    { "<leader>at", "<cmd>ChatGPTRun add_tests<cr>", desc = "Add Tests" },
    {
      "<leader>at",
      "<cmd>ChatGPTRun add_tests<cr>",
      desc = "Add Tests",
      mode = "v",
    },
  },
  cond = function()
    return os.getenv("NVIM_AI_SUPPORT") ~= nil
  end,
}
